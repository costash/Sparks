/**Echipa: Sparks
 * Membri:
 *      Serban-Radoi Constantin (capitan)
 *      Parcalabescu Maria
 *      Oncioiu Raluca
 *      Ivanica Gabriel
 * Etapa3: 22.04.2012
 */

    **Abordare algoritmica

        Pentru a colecta mancarea, am folosit un BFS plecand de la fiecare
unitate catre furnici, iar in momentul in care am gasit una, am trimis-o catre
ea, si am oprit BFS-ul, pentru a nu merge mai multe furnici spre aceeasi mancare.
        In acelasi timp am evitat ca furnicile sa se omoare intre ele, punand
conditia ca in locul unde se muta o furnica, sa nu fie alta.
        Practic, la fiecare runda, se face un BFS pornind de la mancare catre
furnici.

        Pentru a explora harta, spre a gasi alte unitati de mancare, am folosit
initial o functie care muta furnicile *neutilizate* in mod aleator, apoi insa
am revenit asupra acesteia si am decis sa mutam furnicile spre zone marcate
drept *necunoscute*, sau catre unele vizitate cel mai de de mult timp.

        Pentru aparare, trimitem furnici catre zone numite Borders (spatii
stramte), folosind tot un BFS


    **Complexitate

        Pentru BFS-ul catre mancare: O(n^2), unde n este distanta pana la cea
mai apropiata furnica. Limita maxima pentru n este 11*2.
        Deci complexitatea pentru cautarea mancarii este:
            O(n^2 * m), unde n este cel de mai sus, iar m este numarul de bucati
de mancare vizibile.

        Celelalte functii folosesc tot BFS, pornind de la furnici, complexitatea
lor fiind O(n^2 * m), unde m este numarul de furnici pentru care se face BFS, iar
n este cel anterior.


	state.newTurn();
		- 	Initializeaza vectorul de assign task pentru fiecare furnica cu 0

	state.updateHistory();
		-	Incrementeaza cu 1 valoarea fiecarui square de pe harta atat timp cat
			nu a mai fost vizitat

	state.setReachableTiles();
		-	seteaza fiecare squere din aria vizuala a unei furnici cu 0
		-	utilizat pentru functia de exploreMap


	exploreMap();
		-	pornesc un BFS din fiecare furnica pentru a gasi a 11-cea pozitie pe
		care poate ajunge furnica , si care are suma cea mai mare.
		SUM = suma dintre toate posibilitatile de a muta de pe pozitia 10 pe pozitia 11.
		(in principiu sunt 3 zone)

		compar toate sumele de pe pozitiile 11 si ma duc catre pozitia ce are suma
		maxima


		- complexitate O(N^2) unde N ~= 11 - pentru 1 furnica
		- complexitate O(M *N^2) pentru M furnici


	getToBorder();
		- un bfs porniti din toate furnicile vizibile pe harta, toate furnicile mele
		cat si cele inamice.
		- furnica mea - are valoarea 1 si indicele de vizitat 1
		- furncica inamica - valoarea 2 si indice de viziatat 2
		- fac o intersectie de BFS-uri pentru a depista borders
		- la intersectia de BFS un square (grid.square) devine 3 ce reprezinta BORDERWIDTHS
		- la intalnirea unui border cea mai apropiata furnica se duce catre acesta
		- astfel se incearca alungarea inamicului cat mai departe
		- sideEffect : furnicile vor ataca 1 vs 1 si vor muri ambele
		- sideEffect : furnicile inamice se vor retrage si voi avea posibilitatea de a
			aduna mai multe resurse mai repede decat inamicul pentru al omora


		complexitatea O ((m1+m2) * N ^2) unde m1+m2 = toate furnicile vizibile pe harta

		Algoritm tip Kamikaze - castigator doar pe 2 harti din 4




    **Structura proiectului

        Am lucrat pe scheletul de cod de pe aichallenge si cu /tools de la echipa de PA.
Am pastrat comentariile in engleza.
        In plus, am adaugat BfsQueueElement.h pentru BFS-ul din exploreFood().

        Schimbarile fata de scheletul initial au fost facute in fisierul Bot.cc
in care am adaugat functiile pentru explorare si colectare a mancarii. Au fost
adaugate ulterior si functii pentru trimitere a furnicilor catre borders.


    **Limbajul de programare folosit

        Am lucrat in C++, deoarece am considerat ca are toate structurile de date
necesare pentru proiect. In plus, ruleaza mai repede decat Java.
        Mai mult, acest proiect reprezinta o excelenta modalitate de a invata
relativ repede acest limbaj de programare.


    **Mediul de dezvoltare folosit

        Fiecare membru a lucrat in gedit si/sau vim sau un IDE precum Visual Studio
      sau Eclipse


    **Mod de compilare

        S-a folosit makefile-ul implicit, deoarece nu am adaugat alte surse.

      Comanda este:
            make


    **Mod de rulare

        S-a folosit comanda implicita pentru fiecare harta:

        ./playgame.py --log_dir game_logs -So --verbose --engine_seed 42
--player_seed 0 --turns 1000 --map_file CALE_CATRE_HARTA "./bot32" "./MyBot"
| java -jar visualizer.jar


    **Surse de inspiratie

        Am luat idei din codul lui xathis[1], pentru a avea o idee de ansamblu
asupra strategiei de joc. In cele din urma, ne-am folosit de BFS-ul din functia
updateVisionInformation() din State.cc, pe care l-am imbunatatit pentru nevoile
botului nostru. Ne-am folosit si de ideea de a trimite furnicile catre borders.

      [1] http://xathis.com/posts/ai-challenge-2011-ants.html


    **Contributiile fiecarui membru al echipei

        Serban-Radoi Constantin (capitan):

- am implementat exploreMap() intai random, apoi cu un pseudo-BFS
- am facut ca vectorul used din exploreFood() sa poata fi folosit si la
iesirea din functie, deoarece multe dintre furnici stateau pe loc; astfel, s-a
dublat numarul de furnici per fiecare harta folosind cu functia exploreMap()
pentru furnicile care nu erau _used_

        Maria Parcalabescu:

- am implementat functia exploreFood(), prin imbunatatirea BFS-ului de la care
s-a pornit

        Oncioiu Raluca:

- am implementat in paralel functiile exploreFood() si exploreMap(); in cele din
urma, am renuntat la codul meu, deoarece nu genera suficiente furnici
- am scris README-ul

        Ivanica Gabriel:

- implementat exploreMap() , getBorders(), si restul functiilor necesare
- research algoritmi si idei de implementare

